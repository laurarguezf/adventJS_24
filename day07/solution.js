/*

Â¡El grinch ðŸ‘¹ ha pasado por el taller de Santa Claus! Y menudo desastre 
ha montado. Ha cambiado el orden de algunos paquetes, por lo que los 
envÃ­os no se pueden realizar.

Por suerte, el elfo Pheralb ha detectado el patrÃ³n que ha seguido el grinch 
para desordenarlos. Nos ha escrito las reglas que debemos seguir para 
reordenar los paquetes. Las instrucciones que siguen son:

RecibirÃ¡s un string que contiene letras y parÃ©ntesis.
Cada vez que encuentres un par de parÃ©ntesis, debes voltear el contenido 
dentro de ellos.
Si hay parÃ©ntesis anidados, resuelve primero los mÃ¡s internos.
Devuelve el string resultante con los parÃ©ntesis eliminados, pero con el 
contenido volteado correctamente.
Nos ha dejado algunos ejemplos:

fixPackages('a(cb)de')
// âžž "abcde"
// Volteamos "cb" dentro de los parÃ©ntesis

fixPackages('a(bc(def)g)h')
// âžž "agdefcbh"
// 1Âº volteamos "def" â†’ "fed", luego volteamos "bcfedg" â†’ "gdefcb"

fixPackages('abc(def(gh)i)jk')
// âžž "abcighfedjk"
// 1Âº volteamos "gh" â†’ "hg", luego "defhgi" â†’ "ighfed"

fixPackages('a(b(c))e')
// âžž "acbe"
// 1Âº volteamos "c" â†’ "c", luego "bc" â†’ "cb"

*/

function fixPackages(packages) {

    const packagesArray = packages.split(""); //Trasformamos el string en array usando de separaciÃ³n el espacio
    const bracketsIndex = []; //Para almacenar las posiciones de los parÃ©ntesis

    for (let i = 0; i < packagesArray.length ; i++) {
        if (packagesArray[i] === '(') {
            bracketsIndex.push(i); //Almacenamos la posiciÃ³n del parÃ©ntesis de apertura
        }
        else if (packagesArray[i] === ')') {
            const openBracketIndex = bracketsIndex.pop(); //Este es el Ã­ndice del parÃ©ntesis de apertura
            const reverseContent = packagesArray.slice(openBracketIndex + 1, i).reverse(); //AquÃ­ seleccionamos lo elementos en el interior de los brackets y los volteamos
            
            //Reemplazamos el contenido original con el contenido volteado
            //splice(4, 1, "dog") -> replaces 1 element at index 4 with "dog"
            packagesArray.splice(openBracketIndex, i - openBracketIndex + 1, ...reverseContent);

            i = openBracketIndex;
        }
    }

    return packagesArray.filter(letter => letter !== '(' && letter !== ')').join(''); //AquÃ­ retornamos un string identificando las letras que sean distintas a ( y )
}

module.exports = fixPackages;